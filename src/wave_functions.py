import numpy as np
import mpmath as mp
import scipy.special as special

from units import *

l_names =["s", "p", "d", "f", "g"]

# 1.) Initial state wave function class
class Initial_Wavefunctions:
    def __init__(self, name, C, Z, nlj, E_B): 
        self.name = name
        self.C_nlj = C
        self.Z_lj = Z
        self.n_lj = nlj
        self.binding_energies = E_B
        self.Z_eff = []
        for n in range(len(E_B)):
            self.Z_eff.append([])
            for l in range(len(E_B[n])):
                self.Z_eff[n].append((n+1) * np.sqrt(-2*E_B[n][l] / au))
        self.nMax = len(E_B)
        self.lMax = [len(x)-1 for x in E_B]

    def Shell_Name(self, n, l):
        return self.name+"_"+str(n)+l_names[l]

    def R(self, n, l, r):
        radial_wavefunction = 0
        for j in range(len(self.C_nlj[n-1][l])):
            radial_wavefunction += mp.power(a0, -3/2) * self.C_nlj[n-1][l][j] * mp.power(2 * self.Z_lj[l][j], self.n_lj[l][j]+1/2) / mp.sqrt(mp.factorial(2 * self.n_lj[l][j])) * mp.power(r/a0, self.n_lj[l][j]-1) * mp.exp(-self.Z_lj[l][j] * r/a0)
        return radial_wavefunction   

    def dRdr(self, n, l, r):
        derivative = 0
        for j in range(len(self.C_nlj[n-1][l])):
            derivative += self.C_nlj[n-1][l][j] * mp.power(2 * self.Z_lj[l][j], self.n_lj[l][j]+1/2) / mp.sqrt(mp.factorial(2 * self.n_lj[l][j])) * (self.n_lj[l][j]-1) / a0 * mp.power(r/a0, self.n_lj[l][j]-2) * mp.exp(-self.Z_lj[l][j] * r/a0)
            derivative += self.C_nlj[n-1][l][j] * mp.power(2 * self.Z_lj[l][j], self.n_lj[l][j]+1/2) / mp.sqrt(mp.factorial(2 * self.n_lj[l][j])) * mp.power(r/a0, self.n_lj[l][j]-1) * (-self.Z_lj[l][j] /a0) * mp.exp(-self.Z_lj[l][j] * r/a0)
        return mp.power(a0, -3/2) * derivative

    # Alternative definition with numpy (necessary for certain integration methods)
    def R_alternative(self, n, l, r):
        radial_wavefunction = 0
        for j in range(len(self.C_nlj[n-1][l])):
            radial_wavefunction += np.power(a0, -3/2) * self.C_nlj[n-1][l][j] * np.power(2 * self.Z_lj[l][j], self.n_lj[l][j]+1/2) / np.sqrt(np.math.factorial(2 * self.n_lj[l][j])) * np.power(r/a0, self.n_lj[l][j]-1) * np.exp(-self.Z_lj[l][j] * r/a0)
        return radial_wavefunction

    def dRdr_alternative(self, n, l, r):
        derivative = 0
        for j in range(len(self.C_nlj[n-1][l])):
            derivative += self.C_nlj[n-1][l][j] * np.power(2 * self.Z_lj[l][j], self.n_lj[l][j]+1/2) / np.sqrt(np.math.factorial(2 * self.n_lj[l][j])) * (self.n_lj[l][j]-1) / a0 * np.power(r/a0, self.n_lj[l][j]-2) * np.exp(-self.Z_lj[l][j] * r/a0)
            derivative += self.C_nlj[n-1][l][j] * np.power(2 * self.Z_lj[l][j], self.n_lj[l][j]+1/2) / np.sqrt(np.math.factorial(2 * self.n_lj[l][j])) * np.power(r/a0, self.n_lj[l][j]-1) * (-self.Z_lj[l][j] /a0) * np.exp(-self.Z_lj[l][j] * r/a0)
        return np.power(a0, -3/2) * derivative

    def Z_effective(self, n, l):
        return self.Z_eff[n-1][l]

# 2.) Final state wave function
def R_final_kl(r, k, l, Z_eff):
    return 4 * pi * (2*k*r)**l * abs( mp.gamma(l+1 - 1j*Z_eff / k / a0) ) * mp.exp(pi * Z_eff /2/k/a0) / mp.factorial(2*l+1) * (mp.expj(-k*r) * mp.hyp1f1(l+1+1j*Z_eff/k/a0, (2*l+2), 2j*k*r, maxterms=1000000)).real

def R_final_kl_alternative(r, k, l, Z_eff):  
    np1f1 = np.vectorize(mp.hyp1f1)
    result = 4 * np.pi * (2*k*r)**l * np.exp(pi * Z_eff /2/k/a0 + (special.loggamma(l+1-1j * Z_eff/ k / a0)).real) / np.math.factorial(2*l+1) * (np.exp(-1j*k*r) * np1f1(l+1+1j*Z_eff/k/a0, (2*l+2), 2j*k*r, maxterms=1000000)).real
    return result

# 3.) Atomic wave functions (Source: https://www.sciencedirect.com/science/article/pii/S0092640X8371003X?via%3Dihub) 

# 3.1) Argon
C = [
        [
            [0.316405, 0.542760, 0.167691, 0.000408, 0.002431, -0.000861, -0.000422, 0.000066, -0.000061, 0.000009]
        ], 
        [
            [0.079148, -0.507823, 0.059900, -0.026389, 0.832638, 0.295522, 0.000217, 0.002203, 0.001423, 0.000186], 
            [0.002436, -0.114774, -0.503175, -0.427033, 0.009669, -0.004825, 0.000231, -0.000098]
        ], 
        [
            [0.035512, -0.181267, 0.026500, 0.006280, 0.111836, 0.385604, 0.000070, -0.376901, -0.593561, -0.229971], 
            [0.001854, -0.042064, -0.095603, -0.194233, 0.005891, 0.366141, 0.526490, 0.249866]
        ]
    ]
Z = [
        [25.5708, 15.6262, 22.3994, 10.53, 7.0534, 5.412, 46.7052, 3.7982, 2.5495, 1.7965], 
        [26.6358, 12.7337, 7.3041, 5.3353, 20.7765, 3.3171, 2.0947, 1.378]
    ]
n = [
        [1, 1, 2, 2, 2, 2, 3, 3, 3, 3], 
        [2, 2, 2, 2, 3, 3, 3, 3]
    ]
E_B =   [
            [-118.610349 * au], 
            [-12.322152 * au, -9.571464 * au], 
            [-1.277352 * au, -0.591016 * au]
        ]
Ar = Initial_Wavefunctions("Ar", C, Z, n, E_B)

# 3.2) Xenon
C = [
        [
            [-0.965401, -0.040350, 0.001890, -0.003868, -0.000263, 0.000547, -0.000791, 0.000014, -0.000013, -0.000286, 0.000005, -0.000003, 0.000001]
        ], 
        [
            [0.313912, 0.236118, -0.985333, 0.000229, -0.346825, 0.345786, -0.120941, -0.005057, 0.001528, -0.151508, -0.000281, 0.000134, -0.000040], 
            [0.051242, 0.781070, 0.114910, -0.000731, 0.000458, 0.083993, -0.000265, 0.000034, 0.009061, -0.000014, 0.000006, -0.000002]
        ], 
        [
            [-0.140382, -0.125401, 0.528161, -0.000435, 0.494492, -1.855445, 0.128637, -0.017980, 0.000792, 0.333907, -0.000228, 0.000191, -0.000037], 
            [0.000264, 0.622357, -0.009861, -0.952677, -0.337900, -0.026340, -0.000384, -0.001665, 0.087491, 0.000240, -0.000083, 0.000026], 
            [0.220185, 0.603140, 0.194682, -0.014369, 0.049865, -0.000300, 0.000418, -0.000133]
        ], 
        [
            [0.064020, 0.059550, -0.251138, 0.000152, -0.252274, 1.063559, -0.071737, -0.563072, -0.697466, -0.058009, -0.018353, 0.00292, -0.000834], 
            [0.013769, -0.426955, 0.045088, 0.748434, 0.132850, 0.059406, -0.679569, -0.503653, -0.149635, -0.014193, 0.000528, -0.000221], 
            [-0.013758, -0.804573, 0.260624, 0.007490, 0.244109, 0.597018, 0.395554, 0.039786]
        ], 
        [
            [-0.022510, -0.021077, 0.088978, -0.000081, 0.095199, -0.398492, 0.025623, 0.274471, 0.291110, 0.011171, -0.463123, -0.545266, -0.167779], 
            [-0.005879, 0.149040, -0.018716, -0.266839, -0.031096, -0.024100, 0.267374, 0.161460, 0.059721, -0.428353, -0.542284, -0.201667]
        ]
    ]
Z = [
        [54.9179, 47.25, 26.0942, 68.1771, 16.8296, 12.0759, 31.903, 8.0145, 5.8396, 14.7123, 3.8555, 2.6343, 1.8124], 
        [58.7712, 22.6065, 48.9702, 13.4997, 9.8328, 40.2591, 7.1841, 5.1284, 21.533, 3.4469, 2.2384, 1.4588], 
        [19.9787, 12.2129, 8.6994, 27.7398, 15.941, 6.058, 4.099, 2.5857]
    ]
n = [
        [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5], 
        [2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5], 
        [3, 3, 3, 4, 4, 4, 4, 4]
    ]
E_B =   [
            [-1224.397767 * au], 
            [-189.230111 * au, -177.782438 * au], 
            [-40.175652 * au, -35.221651 * au, -26.118859 * au], 
            [-7.856291 * au, -6.008328 * au, -2.777871 * au], 
            [-0.944407 * au, -0.457283 * au]
        ]
Xe = Initial_Wavefunctions("Xe", C, Z, n, E_B)

# 3.3) Sodium
C = [
        [
            [0.387167, 0.434278, 0.213027, 0.002205, 0.000627, -0.000044, -0.000649, 0.000026, -0.000023, 0.000008]
        ], 
        [
            [0.053722, -0.430794, 0.053654, 0.347971, 0.608890, 0.157462, 0.000280, -0.000492, 0.000457, 0.000016 ], 
            [0.004308, 0.157824, 0.388545, 0.489339, 0.039759]
        ], 
        [
            [0.011568, -0.072430, 0.011164, 0.057679, 0.089837, 0.042114, -0.000001, -0.182627, -0.471631, -0.408817]
        ]
   ]
Z = [
        [15.3319, 9.0902, 13.2013, 4.7444, 3.1516, 2.4047, 28.4273, 1.3179, 0.8911, 0.6679], 
        [13.6175, 6.2193, 3.8380, 2.3633, 1.5319]
    ]
n = [
        [1, 1, 2, 2, 2, 2, 3, 3, 3, 3], 
        [2, 2, 2, 2, 2]
    ]
E_B =   [
            [-40.4785 * au], 
            [-2.797026 * au, -1.518140 * au], 
            [-0.182102 * au]
        ]
Na = Initial_Wavefunctions("Na", C, Z, n, E_B)

# 3.4) Iodine
C = [
        [
            [-0.964645, -0.041350, 0.002077, -0.003875, -0.000063, 0.000273, -0.000950, 0.000011, -0.000010, -0.000153, 0.000004, -0.000002, 0.000000]
        ], 
        [
            [ 0.313262, 0.233029, -0.998597, 0.000169, -0.304908, 0.292959, -0.111008, -0.003955, 0.001165, -0.130049, -0.000215, 0.000101, -0.000030], 
            [ 0.053730, 0.773329, 0.119094, -0.000909, 0.000538, 0.086139, -0.000264, 0.000031, 0.008997, -0.000013, 0.000008, -0.000002]
        ], 
        [
            [0.139548, 0.123356, -0.533745, 0.000411, -0.436540, 1.788202, -0.124327, 0.017184, -0.000621, -0.315258, 0.000244, -0.000177, 0.000037], 
            [0.000290, 0.624253, -0.010507, -0.932085, -0.363922, -0.027814, -0.002337, -0.001284, 0.092541, 0.000175, -0.000040, 0.000025], 
            [0.206457, 0.645959, 0.205748, -0.015706, 0.009349, 0.000011, 0.000439, -0.000133]
        ], 
        [
            [0.062924, 0.057894, -0.250833, 0.000140, -0.219917, 1.016648, -0.068867, -0.581290, -0.675335, -0.051735, -0.017394, 0.002308, -0.000779], 
            [ 0.014308, -0.427468, 0.046630, 0.726136, 0.148233, 0.061235, -0.671132, -0.509596, -0.153148, -0.014932, -0.000020, -0.000577], 
            [-0.004338, -0.795614, 0.222659, 0.008081, 0.263784, 0.566249, 0.427834, 0.052510]
        ], 
        [
            [0.021403, 0.019834, -0.086007, 0.000065, -0.078592, 0.365055, -0.024011, -0.275646, -0.261359, -0.006855, 0.442124, 0.549606, 0.178244], 
            [-0.005622, 0.140976, -0.017855, -0.243155, -0.038653, -0.022967, 0.255316, 0.147401, 0.056485, -0.410935, -0.543892, -0.210766]
        ]
    ]
Z = [
        [53.9232, 46.3778, 25.3200, 67.1360, 16.5300, 11.7430, 31.1982, 7.7564, 5.5959, 14.3135, 3.6876, 2.5058, 1.7111], 
        [57.1079, 22.0921, 47.6375, 13.2707, 9.7063, 39.2034, 6.9871, 4.9206, 20.9853, 3.2522, 2.1021, 1.3652], 
        [19.5616, 12.0593, 8.4937, 26.9243, 15.6155, 5.9399, 3.9812, 2.5304]
    ]
n = [
        [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5], 
        [2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5], 
        [3, 3, 3, 4, 4, 4, 4, 4]
    ]
E_B =   [
            [-1177.186285 * au], 
            [-180.949210 * au, -169.660337 * au], 
            [-37.934455 * au, -33.122299 * au, -24.285681 * au], 
            [-7.244349 * au, -5.473347 * au, -2.401195 * au], 
            [-0.821109 * au, -0.403173 * au]
        ]
I = Initial_Wavefunctions("I", C, Z, n, E_B)
